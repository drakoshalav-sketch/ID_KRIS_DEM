import pandas as pd
import os


def parse_and_show(filename, description=""):
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    possible_paths = [
        filename,
        os.path.join("..", "api_example", filename),
        os.path.join("api_example", filename)
    ]

    path = None
    for p in possible_paths:
        if os.path.exists(p):
            path = p
            break

    if not path:
        print(f"\n‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_csv(path, encoding="utf-8")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if df.empty:
            print(f"\n‚ö†Ô∏è  –§–∞–π–ª {filename} –ø—É—Å—Ç–æ–π!")
            return None

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("\n" + "=" * 70)
        if description:
            print(f"üìä {description}")
        else:
            print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {filename}")
        print("=" * 70)

        print(f"–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {df.columns.tolist()}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        missing = df.isnull().sum()
        if missing.any():
            print(f"\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
            for col, count in missing[missing > 0].items():
                print(f"  - {col}: {count}")

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        print("\nüìã –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
        key_cols = [c for c in ["position", "title", "link", "snippet", "source"]
                    if c in df.columns]
        if key_cols:
            print(df[key_cols].head())
        else:
            print(df.head())

        return df

    except pd.errors.EmptyDataError:
        print(f"\n‚ö†Ô∏è  –§–∞–π–ª {filename} –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!")
        return None
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return None


def compare_results():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (API –∏ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥)
    """
    print("\n" + "=" * 70)
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
    print("=" * 70)

    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã API
    df_api = parse_and_show(
        "search_results_api.csv",
        "–ú–ï–¢–û–î 1: API (searchapi.io)"
    )

    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    df_scraping = parse_and_show(
        "search_results_scraping.csv",
        "–ú–ï–¢–û–î 2: WEB SCRAPING (Beautiful Soup)"
    )

    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
    if df_api is not None or df_scraping is not None:
        print("\n" + "=" * 70)
        print("üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 70)

        if df_api is not None:
            print(f"‚úÖ API —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(df_api)}")
        else:
            print("‚ùå API —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        if df_scraping is not None:
            print(f"‚úÖ Web Scraping —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(df_scraping)}")
        else:
            print("‚ùå Web Scraping —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –æ–±—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
        if df_api is not None and df_scraping is not None:
            if 'title' in df_api.columns and 'title' in df_scraping.columns:
                common_titles_api = set(df_api['title'].str.lower())
                common_titles_scraping = set(df_scraping['title'].str.lower())
                overlap = common_titles_api & common_titles_scraping
                print(f"\nüîó –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(overlap)}")

        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    """
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1 - –ê–Ω–∞–ª–∏–∑ API —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("2 - –ê–Ω–∞–ª–∏–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("3 - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ").strip() or "3"

    if choice == "1":
        parse_and_show("search_results_api.csv", "API —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    elif choice == "2":
        parse_and_show("search_results_scraping.csv", "Web Scraping —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    else:
        compare_results()


if __name__ == "__main__":
    main()
